      <!DOCTYPE html>
      <html>
      <head>
      <title>Simple Map</title>
      <meta name="viewport" content="initial-scale=1.0">
          <meta charset="utf-8">

      </head>
      <body>
      <div id="map"></div>


    <script>
      var map;
      var place;
      var geocoder =  new google.maps.Geocoder();
      var from = localStorage.getItem("startpoint");
      var to = localStorage.getItem("endpoint");
      var radius = localStorage.getItem("radius");
      var directionsDisplay;
      var directionsService = new google.maps.DirectionsService();
      var  mode = localStorage.getItem("mode");
      var routes = new google.maps.DirectionsRenderer();
      var selected = localStorage.getItem("wish_do_list").split(",");


      function initMap() {

        directionsDisplay = new google.maps.DirectionsRenderer;
        map = new google.maps.Map(document.getElementById('map'), {
          zoom: 16,
         // mapTypeId: google.maps.MapTypeId.HYBRID,
          center: {lat: 41.85, lng: -87.65}
        });
        directionsDisplay.setMap(map);


        calculateAndDisplayRoute(directionsService,directionsDisplay);

      }

      function calculateAndDisplayRoute(directionsService, directionsDisplay) {

        directionsService.route({

          origin: from,
          destination: to,
          provideRouteAlternatives: true,     //==========================> alternative routes
          travelMode:google.maps.TravelMode[mode]
        }, function(response, status) {
          if (status === google.maps.DirectionsStatus.OK) {
            for (var i = 0, len = response.routes.length; i < len; i++) {
              new google.maps.DirectionsRenderer({
                map: map,
                directions: response,
                routeIndex: i
              });

              directionsDisplay.setDirections(response);

              var rboxer = new RouteBoxer();
              var distance = radius; // km

              var path = response.routes[i].overview_path;
              var boxes = rboxer.box(path, distance);
              for (var j = 0; j < boxes.length; j++) {
                var bounds = boxes[j];
                var allPlaces = getRelatedInterests(selected);
                var centerBoxes = bounds.getCenter();
                console.log(bounds)
                drawBoxes(bounds)

                var request = {
                  location: centerBoxes,
                  radius: convertToMeters(radius),
                  types:  getRelatedInterests(selected)
                };

                service = new google.maps.places.PlacesService(map);
                service.nearbySearch(request, callback);

//                setTimeout(function(){
//                 console.log(j)
//                }, 1000)

//
//                var marker = new google.maps.Marker({
//                  position: centerBoxes,
//                  map: map,
//
//                });
//                //marker.setMap(map);

              }
            }
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      }

      function drawBoxes(bounds) {

          new google.maps.Rectangle({
            bounds: bounds,
            fillOpacity: 0,
            strokeOpacity: 1.0,
            strokeColor: '#000000',
            strokeWeight: 1,
            map: map
          });

      }



      function convertToMeters(radius){
        return radius * 1609.34;
      }

      initMap();


      var hash_types = {};
      hash_types['museums'] = ['museum'];
      hash_types['nature'] = ['park', 'campground', 'rv_park'];
      hash_types['food'] = ['restaurant', 'food', 'cafe'];
      hash_types['night life'] = ['casino', 'night_club', 'bar', 'movie_theater', 'bowling_alley'];
      hash_types['kids'] = ['amusement_park', 'aquarium', 'zoo'];
      hash_types['gas'] = ['gas_station'];
      hash_types['art'] = ['art_gallery'];
      hash_types['city treasures'] = ['city_hall', 'hindu_temple'];




      function getRelatedInterests(selected) {
        var related = [];
        for (var i = 0; i < selected.length; i++) {
          var aux = hash_types[selected[i]];
          for (var j = 0; j < aux.length; j++) {
            related.push(aux[j]);
          }
        }
        return related;
      }


      geocoder.geocode( { 'address': from}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          var request = {
            location: results[0].geometry.location,
            radius: convertToMeters(radius),
            types: getRelatedInterests(selected)
          };

          service = new google.maps.places.PlacesService(map);
          service.nearbySearch(request, callback);

        } else {
          window.alert("Something got wrong " + status);
        }
      });



      geocoder.geocode( { 'address': to}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          var request = {
            location: results[0].geometry.location,
            radius: convertToMeters(radius),
            types:  getRelatedInterests(selected)
          };

          service = new google.maps.places.PlacesService(map);
          service.nearbySearch(request, callback);

        } else {
          window.alert("Something got wrong " + status);
        }
      });




      function callback(results, status) {
        console.log(status)
        if (status == google.maps.places.PlacesServiceStatus.OK) {
          for (var i = 0; i < results.length; i++) {
            place = results[i]
            var marker = new google.maps.Marker({
              position: place.geometry.location,
              map: map
            });
            marker.setMap(map);

          }

        }
      }


    </script>

  </body>
</html>







































