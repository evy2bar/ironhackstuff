      <!DOCTYPE html>
      <html>
      <head>
      <title>Simple Map</title>
      <meta name="viewport" content="initial-scale=1.0">
          <meta charset="utf-8">

      </head>
      <body>
      <div id="map"></div>


    <script>
      var map;
      var place, service;
      var geocoder =  new google.maps.Geocoder();
      var from = localStorage.getItem("startpoint");
      var to = localStorage.getItem("endpoint");
      var radius = localStorage.getItem("radius");
      var directionsDisplay;
      var directionsService = new google.maps.DirectionsService();
      var  mode = localStorage.getItem("mode");
      var selected = localStorage.getItem("wish_do_list").split(",");
      var iconBase = 'https://maps.google.com/mapfiles/kml/';
      var alreadyShown = {};
      var icons = {
        art_gallery: {
          icon: iconBase + 'pal4/icon13.png'
        },
        night_club: {
          icon: iconBase + 'pal2/icon19.png'
        },
        movie_theater: {
          icon: iconBase + "pal2/icon30.png"
        },
        bar: {
          icon: iconBase + 'pal2/icon19.png'
        },
        park: {
          icon: iconBase + 'pal2/icon4.png'
        },
        zoo: {
          icon: iconBase + 'pal2/icon0.png'
        },
        amusement_park: {
          icon: iconBase + 'pal4/icon21.png'
        },
        gas_station: {
          icon: iconBase + 'pal2/icon29.png'
        },
        aquarium: {
          icon: iconBase + 'pal4/icon6.png'
        },
        campground: {
          icon: iconBase + 'pal3/icon23.png'
        },
        bowling_alley: {
          icon: iconBase + 'pal3/icon15.png'
        },
        casino: {
          icon: iconBase + 'pal2/icon59.png'
        },
        city_hall: {
          icon: iconBase + 'pal3/icon21.png'
        },
        food: {
            icon: iconBase + 'pal2/icon46.png'
        },
        museum: {
          icon: iconBase + 'pal3/icon30.png'
        },
        hindu_temple: {
          icon: iconBase + 'pal2/icon3.png'
        },
        restaurant: {
          icon: iconBase + 'pal2/icon46.png'
        },
        cafe: {
          icon: iconBase + 'pal2/icon62.png'
        },
        rv_park: {
          icon: iconBase + 'pal2/icon4.png'
        },
        car_repair: {
          icon: iconBase + 'pal2/icon29.png'
        },
        convenience_store: {
          icon: iconBase + 'pal2/icon29.png'
        },
        store: {
          icon: iconBase + 'pal2/icon29.png'
        }

      };

      function initMap() {

        var directionsDisplay = new google.maps.DirectionsRenderer({
          draggable: true,
          map: map
        })

        map = new google.maps.Map(document.getElementById('map'), {
          zoom: 16,
          // mapTypeId: google.maps.MapTypeId.HYBRID,
          center: {lat: 41.85, lng: -87.65}
        });
        directionsDisplay.setMap(map);

        if (mode === "DRIVING") {
          var trafficLayer = new google.maps.TrafficLayer();
          trafficLayer.setMap(map);
        }
        else if (mode === "TRANSIT") {
          var transitLayer = new google.maps.TransitLayer();
          transitLayer.setMap(map);
        }
        else {
          var bikeLayer = new google.maps.BicyclingLayer();
          bikeLayer.setMap(map);
        }

        calculateAndDisplayRoute(directionsService, directionsDisplay);

      }


        function calculateAndDisplayRoute(directionsService, directionsDisplay) {

          directionsService.route({

            origin: from,
            destination: to,
            provideRouteAlternatives: true,
            avoidTolls: true,
            travelMode: google.maps.TravelMode[mode]
          }, function (response, status) {
            if (status === google.maps.DirectionsStatus.OK) {
              // for (var i = 0, len = response.routes.length; i < len; i++) {       //dont need the loop as i only want to display one route

              directionsDisplay.setDirections(response);

              var rboxer = new RouteBoxer();
              var distance = radius; // km

              var path = response.routes[0].overview_path;
              var boxes = rboxer.box(path, distance);
              for (var j = 0; j < boxes.length; j++) {
                var bounds = boxes[j];
                var centerBoxes = bounds.getCenter();
//
                drawBoxes(bounds);

                var request = {
                  location: centerBoxes,
                  radius: convertToMeters(radius),
                  types: getRelatedInterests(selected)
                };

                repeatingRequest(request);
              }
              //}
            } else {
              window.alert('Directions request failed due to ' + status);
            }
          });
        }


        function drawBoxes(bounds) {
          new google.maps.Rectangle({
            bounds: bounds,
            fillOpacity: 0,
            strokeOpacity: 1.0,
            strokeColor: '#000000',
            strokeWeight: 1,
            map: map
          });
        }


        function convertToMeters(radius) {
          return radius * 1609.34;
        }

        initMap();


        var hash_types = {};
        hash_types['museums'] = ['museum'];
        hash_types['nature'] = ['park', 'campground', 'rv_park'];
        hash_types['food'] = ['restaurant', 'food', 'cafe'];
        hash_types['night life'] = ['casino', 'night_club', 'bar', 'movie_theater', 'bowling_alley'];
        hash_types['kids'] = ['amusement_park', 'aquarium', 'zoo'];
        hash_types['gas'] = ['gas_station'];
        hash_types['art'] = ['art_gallery'];
        hash_types['city treasures'] = ['city_hall', 'hindu_temple'];


        function getRelatedInterests(selected) {
          var related = [];
          for (var i = 0; i < selected.length; i++) {
            var aux = hash_types[selected[i]];
            for (var j = 0; j < aux.length; j++) {
              related.push(aux[j]);
            }
          }
          return related;
        }


        geocoder.geocode({'address': from}, function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            var request = {
              draggable: true,
              location: results[0].geometry.location,
              radius: convertToMeters(radius),
              types: getRelatedInterests(selected)
            };

            service = new google.maps.places.PlacesService(map);
            service.nearbySearch(request, callback);

          } else {
            window.alert("Something got wrong " + status);
          }
        });


        geocoder.geocode({'address': to}, function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            var request = {
              draggable: true,
              location: results[0].geometry.location,
              radius: convertToMeters(radius),
              types: getRelatedInterests(selected)
            };

            service = new google.maps.places.PlacesService(map);
            service.nearbySearch(request, callback);

          } else {
            window.alert("Something got wrong " + status);
          }
        });


        function callback(results, status) {
          console.log("this is results");
          console.log(results)

          if (status == google.maps.places.PlacesServiceStatus.OK) {

            for (var i = 0; i < results.length; i++) {
              place = results[i];


              var icon = icons[place.types[0]]
              if (icon && alreadyShown[place.id] === undefined) {
                alreadyShown[place.id] = true;
                var image = {
                  url: icon.icon
                };

                var marker = new google.maps.Marker({
                  icon: image,
                  position: place.geometry.location,
                  animation: google.maps.Animation.DROP,
                  map: map

                });
                marker.setMap(map);
                marker.addListener('click', toggleBounce.bind(null, marker));
                marker.addListener('mouseover', getinfoWindow)
                function getinfoWindow(){
                  var infowindow = new google.maps.InfoWindow();
                  infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +
                      place.address + '</div>');
                  infowindow.open(map, this);


                }

              }
            }
          }
        }

        function toggleBounce(marker) {
          console.log(marker)
          if (marker.getAnimation() !== null) {
            marker.setAnimation(null);
          } else {
            marker.setAnimation(google.maps.Animation.BOUNCE);
          }
        }

        function drop() {
          for (var i = 0; i < marker.length; i++) {
            setTimeout(function () {
              drop();
            }, i * 200);
          }
        }



//
      var infowindow = new google.maps.InfoWindow();
      var service = new google.maps.places.PlacesService(map);

      service.getDetails({
        placeId: 'ChIJN1t_tDeuEmsRUsoyG83frY4'
      }, function(place, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          var marker = new google.maps.Marker({
            map: map,
            position: place.geometry.location
          });
          google.maps.event.addListener(marker, 'click', function() {
            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +
                'Place ID: ' + place.place_id + '<br>' +
                place.formatted_address + '</div>');
            infowindow.open(map, this);
          });
        }
      });


    </script>

  </body>
</html>







































