<!DOCTYPE html>
<html>
  <head>
    <title>Simple Map</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>

 <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyByrNx3ukuCGzwjIQGxmN6hsZcm-4xWUgQ&libraries=places"></script>

    <script>
var map;
var place;
var geocoder =  new google.maps.Geocoder();
var from = localStorage.getItem("startpoint");
var to = localStorage.getItem("endpoint");
var radius = localStorage.getItem("radius");
var directionsDisplay;
var directionsService = new google.maps.DirectionsService();
var  mode = localStorage.getItem("mode");
var routes = new google.maps.DirectionsRenderer();



function initMap() {

   directionsDisplay = new google.maps.DirectionsRenderer;
  map = new google.maps.Map(document.getElementById('map'), {
    zoom: 16,
    center: {lat: 41.85, lng: -87.65}
  });
  directionsDisplay.setMap(map);


 calculateAndDisplayRoute(directionsService,directionsDisplay);

}

function calculateAndDisplayRoute(directionsService, directionsDisplay) {

  directionsService.route({

    origin: from,
    destination: to,
    provideRouteAlternatives: true,     //==========================> alternative routes
    travelMode:google.maps.TravelMode[mode]
  }, function(response, status) {
    if (status === google.maps.DirectionsStatus.OK) {
      for (var i = 0, len = response.routes.length; i < len; i++) {
        new google.maps.DirectionsRenderer({
          map: map,
          directions: response,
          routeIndex: i
        });

        directionsDisplay.setDirections(response);
        console.log(response)
      }
    } else {
      window.alert('Directions request failed due to ' + status);
    }
  });
}







function convertToMeters(radius){
  return radius * 1609.34;
}

initMap();



geocoder.geocode( { 'address': from}, function(results, status) {
  if (status == google.maps.GeocoderStatus.OK) {
    var request = {
      location: results[0].geometry.location,
      radius: convertToMeters(radius),
      types: ['store']
    };

    service = new google.maps.places.PlacesService(map);
    service.nearbySearch(request, callback);

  } else {
    window.alert("Something got wrong " + status);
  }
});



geocoder.geocode( { 'address': to}, function(results, status) {
  if (status == google.maps.GeocoderStatus.OK) {
  var request = {
      location: results[0].geometry.location,
      radius: convertToMeters(radius),
      types: ['store']
    };

    service = new google.maps.places.PlacesService(map);
    service.nearbySearch(request, callback);

  } else {
    window.alert("Something got wrong " + status);
  }
});




function callback(results, status) {
  if (status == google.maps.places.PlacesServiceStatus.OK) {
    for (var i = 0; i < results.length; i++) {
      place = results[i];

      var marker = new google.maps.Marker({
        position: place.geometry.location,
        map: map
      });
      marker.setMap(map);

    }

  }
}










    </script>
   
  </body>
</html>